plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'checkstyle'
	id 'jacoco'
}

checkstyle {
	toolVersion '10.13.0'
	configDirectory = file("${rootDir}/config/checkstyle")
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

group = 'nl.tudelft.medtechchain'
version = '1.0.0'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	flatDir {
		dirs 'libs'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Persistence
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '3.2.2'
	// H2 in-memory database for testing
	implementation group: 'com.h2database', name: 'h2', version: '2.2.224'
	// PostgreSQL database for production
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.2'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.5'

	// Jackson for JSON parsing
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

	// Email support
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.2.3'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.3'

	// Chaincode
	implementation 'org.hyperledger.fabric:fabric-gateway:1.5.0'
	compileOnly 'io.grpc:grpc-api:1.59.0'
	implementation 'io.grpc:grpc-netty-shaded:1.59.0'

	// Profobuf
	implementation 'com.google.protobuf:protobuf-java:3.25.3'
	implementation 'com.google.protobuf:protobuf-java-util:3.25.3'
	implementation ':medtechchain.protos:0.0.1'


	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
	testImplementation 'org.mockito:mockito-core:5.11.0'
	testImplementation 'org.assertj:assertj-core:3.25.3'  // The best testing framework
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

test {
	useJUnitPlatform()
	jacoco {
		enabled = true
		includes = ['nl.tudelft.medtechchain.*']
		excludes = []
	}
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestCoverageVerification() {
	dependsOn test
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = ['nl.tudelft.medtechchain.*']

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
			}
		}
	}
}

jacocoTestReport {
	// (https://docs.gradle.org/current/userguide/jacoco_plugin.html)
	// Responsible for aggregating the code coverage reports
	dependsOn {
		test
		jacocoTestCoverageVerification
	}

	// We exclude GatewayConfig, since the functionality has been provided to us by the code in the fabric samples
	// (https://github.com/hyperledger/fabric-samples/tree/main/asset-transfer-basic/application-gateway-java)
	//  and has not been written by us.
	// Furthermore, in order to test this class, everything has to be mocked and it is not possible to test this
	//  class in a proper and meaningful way (especially without actually having to run the fabric infrastructure).
	// We also exclude EmailService from the coverage, since with the current implementation it is impossible to test it
	//  in a proper and meaningful way (while we can mock the JavaMailSender, we cannot really test whether the email
	//  has been sent successfully; furthermore, the MimeMessagePreparator is created with a lambda which is never
	//  called in the application, but is required to create the class (thus, it cannot be covered).
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['nl/tudelft/medtechchain/config/GatewayConfig.class',
										'nl/tudelft/medtechchain/services/EmailService.class'])
		}))
	}

	// Output html and csv (used to extract coverage percentage)
	reports {
		xml.required = false
		csv.required = true
		html.required = true
	}
}