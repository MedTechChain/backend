# SERVER PROPERTIES
# Server listening port (HTTPS)
server.port=${SERVER_PORT:8088}
# Include server messages for failing a request
server.error.include-message=never

# TLS PROPERTIES
server.ssl.enabled=${HTTPS_ENABLED:false}
server.ssl.key-store-type=PKCS12
server.ssl.key-store=${SSL_KEY_STORE:keystore/keystore.p12}
server.ssl.key-store-password=${SSL_KEY_STORE_PASSWORD:medtechchain}
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.3

# DATABASE PROPERTIES
spring.datasource.url=jdbc:postgresql://${DB_POSTGRES_HOST:localhost}:${DB_POSTGRES_PORT:5432}/${DB_POSTGRES_DBNAME:medtechchain}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${DB_POSTGRES_USERNAME:admin}
spring.datasource.password=${DB_POSTGRES_PASSWORD:admin}

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=true

spring.session.jdbc.initialize-schema=always
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

# JSON PROPERTIES
spring.jackson.deserialization.fail-on-ignored-properties=true
spring.jackson.deserialization.fail-on-unknown-properties=true
spring.jackson.deserialization.fail-on-null-creator-properties=true
spring.jackson.deserialization.fail-on-missing-creator-properties=true
spring.jackson.mapper.accept-case-insensitive-enums=true

# JWT PROPERTIES
# JWT validity (in minutes)
jwt.expiration-time=60
# JWT secret key (generated locally using KeePassXC password manager, 256 characters)
# It is highly recommended to change it. Make sure it is secure!
# 256 characters (32 bytes) of full-entropy key is enough
jwt.secret-key-string=${JWT_SECRET_KEY:QdBnxtH8HdbAjCtdf6cXx9ICzGRSIwvnvtCZTBk2CsEwQIRVhDaRezvb2BTClGlWv1etmWqFUDNuuhl8Iwt4Y38pKzIHG47LKdUzA0rut1e862fuG3PIkujl47Ox3rhIVB2Rn8vwvvSyrkpSWy1KeuIHHyks54rkOsZ6esL86hBMw3Wdme7U1yv25og9Ilv7bL9YwgawNFkvEyIVfGM9na4BSe34MrW6DEA33Vb6okJcSTyKBAnQQ3QNUDB6kxwS}

# PASSWORD PROPERTIES
password.length=15
password.encoder-strength=12

# EMAIL PROPERTIES
spring.mail.host=${SMTP_SERVER_HOST:localhost}
spring.mail.port=${SMTP_SERVER_PORT:25}
spring.mail.username=${SMTP_USER:noreply.medtechchain@gmail.com}
spring.mail.password=${SMTP_PASSWORD:}
spring.mail.properties.mail.smtp.auth=${SMTP_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${SMTP_TLS:false}
spring.mail.properties.mail.smtp.starttls.required=${SMTP_TLS:false}

# CORS PROPERTIES
spring.graphql.cors.allowed-origins=http://localhost:3000
spring.graphql.cors.allowed-headers=Authorization,Cache-Control,Content-Type
spring.graphql.cors.allowed-methods=GET,HEAD,POST,PUT,DELETE,OPTIONS
spring.graphql.cors.allow-credentials=true

# FABRIC GATEWAY PROPERTIES
# Is needed to instantiate the correct bean, depending on whether it is main or test environment
gateway.mock=${MOCK_GATEWAY:false}
# ID of the Membership Service Provider (see https://hyperledger-fabric.readthedocs.io/en/latest/membership/membership.html)
gateway.msp-id=${MSP_ID:MedTechChainPeerMSP}
# Path to crypto materials.
gateway.crypto-path=${CRYPTO_PATH:./crypto/medtechchain.nl}
# Path to user certificate.
gateway.cert-dir-path=${CERT_DIR_PATH:msp/signcerts}
# Path to user private key directory.
gateway.key-dir-path=${KEY_DIR_PATH:msp/keystore}
# Path to peer tls certificate.
gateway.tls-cert-path=${TLS_CERT_PATH:tls/ca.crt}
# Gateway peer end point.
gateway.peer-endpoint=${PEER_ENDPOINT:localhost:8051}
gateway.override-auth=${OVERRIDE_AUTH:peer0.medtechchain.nl}
#--------------------------------------------------------------
gateway.channel-name=${CHANNEL_NAME:medtechchain}
gateway.chaincode-name=${CHAINCODE_NAME:medtechchain}
gateway.smart-contract-name=${SMART_CONTRACT_NAME:devicemetadata}
gateway.query-smart-contract-name=${QUERY_SMART_CONTRACT:Query}